class Solution {

    public int findShortestSubArray(int[] nums) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int degree = 0;
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                map.get(nums[i]).add(i);
            } else {
                List<Integer> indexList = new ArrayList<>();
                indexList.add(1);
                map.put(nums[i], indexList);
            }
            degree = Math.max(degree, map.get(nums[i]).size());
        }

        int res = nums.length;
        for (Integer key : map.keySet()) {
            List<Integer> indexList = map.get(key);
            if (indexList.size() == degree) {
                int len = indexList.get(indexList.size() - 1) - indexList.get(0) + 1;
                res = Math.min(res, len);
            }
        }
        return res;
    }

    public int findShortestSubArray2(int[] nums) {
        Map<Integer, Detail> detailMap = new HashMap<>();
        int degree = 0;
        int cnt = 0;
        for (int i = 0; i < nums.length; i++) {
            if (!detailMap.containsKey(nums[i])) {
                cnt = 1;
                detailMap.put(nums[i], new Detail(cnt, i, i));
            } else {
                Detail detail = detailMap.get(nums[i]);
                cnt = detail.getCnt() + 1;
                detail.setCnt(cnt);
                detail.setStop(i);
            }
            degree = Math.max(degree, cnt);
        }

        int res = nums.length;
        for (Integer num : detailMap.keySet()) {
            Detail detail = detailMap.get(num);
            if (detail.getCnt() == degree) {
                int len = detail.getStop() - detail.getStart() + 1;
                res = Math.min(res, len);
            }
        }
        return res;
    }

    class Detail {
        int cnt;
        int start;
        int stop;

        public int getCnt() {
            return cnt;
        }

        public void setCnt(int cnt) {
            this.cnt = cnt;
        }

        public int getStart() {
            return start;
        }

        public void setStart(int start) {
            this.start = start;
        }

        public int getStop() {
            return stop;
        }

        public void setStop(int stop) {
            this.stop = stop;
        }

        public Detail(int cnt, int start, int stop) {
            this.cnt = cnt;
            this.start = start;
            this.stop = stop;
        }
    }
}

//total_testcases:89
//total_correct:30
//input_formatted:[1,1]
//expected_output:2
//code_output:1
