package leetcode.editor.cn;

//Given a string s consisting only of letters 'a' and 'b'. In a single step you 
//can remove one palindromic subsequence from s. 
//
// Return the minimum number of steps to make the given string empty. 
//
// A string is a subsequence of a given string, if it is generated by deleting s
//ome characters of a given string without changing its order. 
//
// A string is called palindrome if is one that reads the same backward as well 
//as forward. 
//
// 
// Example 1: 
//
// 
//Input: s = "ababa"
//Output: 1
//Explanation: String is already palindrome
// 
//
// Example 2: 
//
// 
//Input: s = "abb"
//Output: 2
//Explanation: "abb" -> "bb" -> "". 
//Remove palindromic subsequence "a" then "bb".
// 
//
// Example 3: 
//
// 
//Input: s = "baabb"
//Output: 2
//Explanation: "baabb" -> "b" -> "". 
//Remove palindromic subsequence "baab" then "b".
// 
//
// Example 4: 
//
// 
//Input: s = ""
//Output: 0
// 
//
// 
// Constraints: 
//
// 
// 0 <= s.length <= 1000 
// s only consists of letters 'a' and 'b' 
// Related Topics 字符串 
// 👍 37 👎 0


/**
 * @author zoro-learner
 * @create 2020-08-29 15:12:43
 */
public class RemovePalindromicSubsequences {
    public static void main(String[] args) {
        Solution solution = new RemovePalindromicSubsequences().new Solution();
        
    }
    
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int removePalindromeSub(String s) {
        boolean isRemoved[] = new boolean[s.length()];
        int cnt = 0;
        int res = 0;
        int head = 0;
        int tail = s.length() - 1;
        while (cnt < s.length()) {
            tail = s.length() - 1;
            while (head < tail && isRemoved[head]) {
                head++;
            }
            while (head < tail && isRemoved[tail]) {
                tail--;
            }

            while (head < tail) {
                if (s.charAt(head) == s.charAt(tail)) {
                    isRemoved[head] = true;
                    isRemoved[tail] = true;
                    head++;
                    tail--;
                    cnt += 2;
                } else {
                    tail--;
                }
            }
            if (head == tail) {
                isRemoved[head] = true;
                cnt += 1;
            }
            res++;
        }
        return res;
    }

}
//leetcode submit region end(Prohibit modification and deletion)

    
}